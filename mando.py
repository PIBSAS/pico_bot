import time
from machine import UART, Pin, ADC, I2C,
from ssd1306 import SSD1306_I2C
import framebuf
import _thread
# Configuración de los pines de los pulsadores
pulsador1 = Pin(2, Pin.IN, Pin.PULL_UP)
pulsador2 = Pin(1, Pin.IN, Pin.PULL_UP)
pulsador3 = Pin(0, Pin.IN, Pin.PULL_UP)
pulsador4 = Pin(7, Pin.IN, Pin.PULL_UP)
pulsador5 = Pin(6, Pin.IN, Pin.PULL_UP)
pulsador6 = Pin(3, Pin.IN, Pin.PULL_UP)
pulsador7 = Pin(28, Pin.IN, Pin.PULL_UP)

# Configuración del joystick (ejes X e Y)
yAxis = ADC(Pin(27))
xAxis = ADC(Pin(26))

# Configuración del I2C para el OLED
sda = Pin(14)
scl = Pin(15)
i2c = I2C(id=1, scl=scl, sda=sda)

# Configuración del OLED
oled_width = 128
oled_height = 64
oled = SSD1306_I2C(width=oled_width, height=oled_height, i2c=i2c)
oled.fill(0)  # Limpia la pantalla al inicio
oled.show()  # Refleja los cambios iniciales

# Configuración del puerto UART
modulo = UART(1, baudrate=9600, tx=Pin(4), rx=Pin(5))  # Asegúrate de conectar TX y RX correctamente

# Diccionario para los mensajes
mensajes = {
    'a':'Blancos Toggle', 
    'b':'Verdes Toggle', 
    'c': 'Rojos Toggle',
    'd': 'Bocina',
    'e': 'Modo Autonomo',
    'f': 'Jingle Bells',
    'g': 'Adelante',
    'h': 'Atras',
    'i': 'Giro Izquierda',
    'j': 'Giro  Derecha',
    'k': 'Esperando Orden',
    'l': 'Objeto Detectado',  
}


logo_bitmap = [
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x40, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x08, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x10, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x08, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x20, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x08, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x20, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x08, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x66, 0x30, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x04, 0xa6, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xa6, 0x30, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x14, 0xaf, 0x30, 0x00, 0x00, 0x00, 0x00, 0x07, 0xef, 0x77, 0xbc, 0x00, 0x00, 
0x00, 0x00, 0x08, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x10, 0x00, 0x00, 0x02, 0x00, 0x18, 
0x01, 0x80, 0x33, 0xff, 0xff, 0xfa, 0x00, 0x38, 0x00, 0x61, 0xf3, 0x00, 0x00, 0x0a, 0x78, 0xc0, 
0x00, 0x01, 0xf2, 0x00, 0x00, 0x0a, 0x70, 0x00, 0x00, 0x00, 0x33, 0x80, 0x00, 0x0a, 0x00, 0x00, 
0x00, 0x00, 0x33, 0xf7, 0xff, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x33, 0xff, 0xff, 0xfa, 0x00, 0x00, 
0x00, 0x01, 0xf3, 0xff, 0xbf, 0xfa, 0x7f, 0xc0, 0x00, 0x01, 0xf2, 0x00, 0x00, 0x0a, 0x70, 0x00, 
0x00, 0x00, 0x32, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0a, 0x00, 0x00, 
0x08, 0x01, 0xf2, 0x00, 0xe0, 0x0a, 0x70, 0x02, 0x0f, 0xf3, 0xf2, 0x00, 0xe0, 0x0a, 0xff, 0xfe, 
0x00, 0x00, 0x32, 0x00, 0x60, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0xc0, 0x0a, 0x00, 0x00, 
0x00, 0x00, 0x32, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x3f, 0x73, 0xa0, 0x00, 0x0a, 0x70, 0x00, 
0x00, 0x01, 0xf3, 0xff, 0xff, 0xfa, 0x70, 0x00, 0x00, 0x00, 0x33, 0xff, 0xff, 0xfa, 0x00, 0x00, 
0x00, 0x00, 0x33, 0xff, 0xbf, 0xfa, 0x00, 0x00, 0x00, 0x01, 0xf2, 0x03, 0x00, 0x0a, 0x70, 0x00, 
0x00, 0x7f, 0xf2, 0x00, 0x00, 0x0a, 0x7f, 0xc0, 0x00, 0x80, 0x33, 0xff, 0xff, 0xfa, 0x00, 0x30, 
0x03, 0x00, 0x10, 0x00, 0x00, 0x02, 0x00, 0x18, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xc6, 0x33, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x84, 0xa7, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0x84, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x84, 0xa6, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0x8c, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x42, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x80, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x42, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x80, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x42, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x02, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x40, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x06, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]

# Funciones para enviar y recibir datos a través de UART
def enviar_datos(dato):
    modulo.write(dato + '\n')  # Envía el dato con un salto de línea para delimitación

def recibir_datos():
    if modulo.any():  # Verifica si hay datos disponibles
        dato = modulo.read().decode('utf-8').strip()  # Lee y decodifica los datos
        return dato
    return None

def accion(mensaje):
    oled.fill(0)
    oled.text("PICO BOT", 0, 0)
    oled.text(mensaje, 0, 16)  # Muestra el dato recibido en la pantalla
    oled.show()

def mostrar_logo():
    """Función para mostrar el logo en la pantalla OLED."""
    oled.fill(0)  # Limpiar pantalla
    oled.blit(fb, 32, 0)  # Dibujar el FrameBuffer en la pantalla
    oled.show()  # Mostrar en la pantalla
    time.sleep(2)  # Esperar 2 segundos


buffer = bytearray(logo_bitmap)
fb = framebuf.FrameBuffer(buffer, 64, 64, framebuf.MONO_HLSB)
_thread.start_new_thread(mostrar_logo,())
# Bucle principal
while True:
    # Control de pulsadores y eje X/Y
    xValue = xAxis.read_u16()
    yValue = yAxis.read_u16()

    # Lee el estado de los pulsadores
    if not pulsador1.value():
        enviar_datos('A')
        time.sleep(1)
    elif not pulsador2.value():
        enviar_datos('B')
        time.sleep(1)
    elif not pulsador3.value():
        enviar_datos('C')
        time.sleep(1)
    elif not pulsador4.value():
        enviar_datos('D')
        time.sleep(1)
    elif not pulsador5.value():
        enviar_datos('E')
        time.sleep(1)
    elif not pulsador6.value():
        enviar_datos('F')
        time.sleep(1)
    elif yValue >= 60000:
        enviar_datos('G')
        time.sleep(0.5)
    elif yValue <= 600:
        enviar_datos('H')
        time.sleep(0.5)
    elif xValue >= 60000:
        enviar_datos('I')
        time.sleep(0.5)
    elif xValue <= 600:
        enviar_datos('J')
        time.sleep(0.5)
    elif xValue >= 30000 and yValue >= 30000:
        enviar_datos('K')
        time.sleep(0.5)
    if not pulsador7.value():
        enviar_datos('LL')
        time.sleep(1)
    # Recepción de datos por UART
    datos = recibir_datos()

    if datos:
        print(f"Caracter Recibido: {datos}")
        mensaje = mensajes.get(datos, None)  # Obtiene el mensaje asociado al caracter
        if mensaje:
            accion(mensaje)

    time.sleep(0.1)  # Pequeño retardo
